#!/usr/bin/env python3
# This file is placed in the Public Domain.
#
# pylint: disable=C0413,W0611


"""
OBJSH - objects shell

    objsh  <cmd> [key=val] [key==val]
    objsh  [-a] [-c] [-h] [-v]

    -a     load all modules
    -c     start console
    -h     show help
    -v     use verbose

    $ objsh cmd
    cfg,cmd,dpl,err,exp,imp,mod,mre,nme,pwd,rem,res,rss,thr

    $ objsh mod
    cmd,err,fnd,irc,log,mod,req,rss,tdo,thr

    $ objsh -c

    $ objsh -c mod=irc,rss
    >

    $ objsh -cv mod=irc
    OBJSH started CV started Sat Dec 2 17:53:24 2023
    >
"""

import os
import readline
import sys
import termios
import time


sys.path.insert(0, os.getcwd())


from objx import Default


from objr.client  import Client, Command, parse
from objr.handler import Event
from objr.log     import debug, enable
from objr.run     import broker
from objr.thread  import errors, later, setout
from objd.main    import Cfg, cmnd, getmods, init, scan


from objd import modules


class Console(Client):

    "Console"

    def __init__(self):
        Client.__init__(self)
        broker.add(self)

    def announce(self, txt):
        "disable announce."

    def callback(self, evt):
        "wait for callback."
        Client.callback(self, evt)
        evt.wait()

    def poll(self):
        "poll console and create event."
        evt = Event()
        evt.orig = object.__repr__(self)
        evt.txt = input("> ")
        evt.type = "command"
        return evt

    def say(self, _channel, txt):
        "print to console"
        txt = txt.encode('utf-8', 'replace').decode()
        print(txt)


def wrap(func):
    "restore console."
    old2 = None
    try:
        old2 = termios.tcgetattr(sys.stdin.fileno())
    except termios.error:
        pass
    try:
        func()
    except (KeyboardInterrupt, EOFError):
        print("")
    finally:
        if old2:
            termios.tcsetattr(sys.stdin.fileno(), termios.TCSADRAIN, old2)
    errors()


def main():
    "main"
    parse(Cfg, " ".join(sys.argv[1:]))
    if "h" in Cfg.opts:
        print(__doc__)
        return
    if "a" in Cfg.opts:
        Cfg.mod = ",".join(dir(modules))
    if "v" in Cfg.opts:
        enable(print)
        setout(print)
        dte = " ".join(time.ctime(time.time()).replace("  ", " ").split()[1:])
        debug(f'{dte} {Cfg.name.upper()} {Cfg.opts.upper()} {Cfg.mod.upper()}'.replace("  ", " "))
    scan(modules, Cfg.mod, Cfg.sets.dis)
    init(modules, Cfg.mod, Cfg.sets.dis)
    csl = Console()
    csl.start()
    forever()


if __name__ == "__main__":
    wrap(main)
